"""
This file contains the base class for the Age distributions.
"""

__all__ = ["Age", ]
__date__ = "2022-06-27"
__version__ = '1.0.0'

from abc import ABC, abstractmethod
from types import ModuleType
import numpy as np
from .. import const, default_sun

class Age(ABC):
    """
    The Age base class for a Population class. The appropriate subclass is
    assigned based on the age_func_kwargs through the "get_subclass" factory.

    Attributes
    ----------
    age_func_name : str
        name of the Age Class
    (more attributes are specified in the subclasses)

    Methods
    -------
    __init__(self,**kwargs) : None
        initialize the Age class
    draw_random_age(self, N: int or None = None) : float, ndarray [Gyr]
        returns one or more values for the age of a star in giga-years.
        (specified in the subclasses)
    average_age(self) : float [Gyr]
        returns the average age of the distribution in giga-years.
        (specified in the subclasses)
    """


    def __init__(self, sun: ModuleType = None,
            coord_trans: ModuleType = None,
            **kwargs):
        """
        Initialize the Age class for a Population class.
        
        Parameters
        ----------
        su
        **kwargs : dict, optional
            control keywords for the age class read from the population.json files
        """
        self.age_func_name = 'None'
        # sun sun sun, here it comes
        self.sun = sun if sun is not None else default_sun
        self.coord_trans = coord_trans

    @abstractmethod
    def draw_random_age(self, N: int = None) -> np.ndarray or float:
        """
        Generate a random age from the distribution

        Parameters
        ----------
        N : int, None, optional
            if N is set to an integer, an array with N random ages is returned
        Returns
        -------
        random_age : ndarray or float [Gyr]
            array of random ages
        """
        raise NotImplementedError('No age subclass set')

    @abstractmethod
    def average_age(self) -> float:
        """
        Returns the average age of the population
        """
        raise NotImplementedError('No age subclass set')

    @abstractmethod
    def get_maximum_age(self) -> float:
        """
        returns the maximum age generated by the distribution
        if there is no maximum, it should return None.
        """
        return None
